{"version":3,"file":"index.js","sources":["uni_modules/sp-editor/utils/index.js"],"sourcesContent":["// 标识必须独一无二 - 标识是为了使用insertText插入标识文本后，查找到标识所在delta位置的索引\r\nexport const linkFlag = '#-*=*-*=*-*=*@-link超链接标识link-@*=*-*=*-*=*-#'\r\n\r\nexport function addLink(editorCtx, attr, callback) {\r\n\t// 先插入一段文本内容\r\n\teditorCtx.insertText({\r\n\t\ttext: linkFlag\r\n\t})\r\n\t// 获取全文delta内容\r\n\teditorCtx.getContents({\r\n\t\tsuccess(res) {\r\n\t\t\tlet options = res.delta.ops\r\n\t\t\tconst findex = options.findIndex(item => {\r\n\t\t\t\treturn item.insert && typeof item.insert !== 'object' && item.insert?.indexOf(linkFlag) !== -1\r\n\t\t\t})\r\n\t\t\t// 根据标识查找到插入的位置\r\n\t\t\tif (findex > -1) {\r\n\t\t\t\tconst findOption = options[findex]\r\n\t\t\t\tconst findAttributes = findOption.attributes\r\n\t\t\t\t// 将该findOption分成三部分：前内容 要插入的link 后内容\r\n\t\t\t\tconst [prefix, suffix] = findOption.insert.split(linkFlag);\r\n\t\t\t\tconst handleOps = []\r\n\t\t\t\t// 前内容\r\n\t\t\t\tif (prefix) {\r\n\t\t\t\t\tconst prefixOps = findAttributes ? {\r\n\t\t\t\t\t\tinsert: prefix,\r\n\t\t\t\t\t\tattributes: findAttributes\r\n\t\t\t\t\t} : {\r\n\t\t\t\t\t\tinsert: prefix\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandleOps.push(prefixOps)\r\n\t\t\t\t}\r\n\t\t\t\t// 插入的link\r\n\t\t\t\tconst linkOps = {\r\n\t\t\t\t\tinsert: attr.text,\r\n\t\t\t\t\tattributes: {\r\n\t\t\t\t\t\tlink: attr.href,\r\n\t\t\t\t\t\ttextDecoration: attr.textDecoration || 'none', // 下划线\r\n\t\t\t\t\t\tcolor: attr.color || '#007aff'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\thandleOps.push(linkOps)\r\n\t\t\t\t// 后内容\r\n\t\t\t\tif (suffix) {\r\n\t\t\t\t\tconst suffixOps = findAttributes ? {\r\n\t\t\t\t\t\tinsert: suffix,\r\n\t\t\t\t\t\tattributes: findAttributes\r\n\t\t\t\t\t} : {\r\n\t\t\t\t\t\tinsert: suffix\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandleOps.push(suffixOps)\r\n\t\t\t\t}\r\n\t\t\t\t// 删除原options[findex]并在findex位置插入上述三个ops\r\n\t\t\t\toptions.splice(findex, 1);\r\n\t\t\t\toptions.splice(findex, 0, ...handleOps);\r\n\t\t\t\t// 最后重新初始化内容，注意该方法会导致光标重置到最开始位置\r\n\t\t\t\teditorCtx.setContents({\r\n\t\t\t\t\tdelta: {\r\n\t\t\t\t\t\tops: options\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t// 所以最后建议使富文本光标失焦，让用户手动聚焦光标\r\n\t\t\t\teditorCtx.blur()\r\n\r\n\t\t\t\t// 后续回调操作\r\n\t\t\t\tif (callback) callback()\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n}\r\n\r\n/**\r\n * 将含有特殊图片形式视频的富文本转换成正常视频的富文本\r\n * @param {String} html 要进行处理的富文本字符串\r\n * @returns {String} 返回处理结果\r\n */\r\nexport function handleHtmlWithVideo(html) {\r\n\t// 正则表达式用于匹配img标签中带有alt属性且alt属性值为视频链接的模式\r\n\tconst regex = /<img\\s+src=\"[^\"]*\"\\s+alt=\"([^\"]*)\"[^>]*>/g\r\n\t// 使用replace方法和一个函数回调来替换匹配到的内容\r\n\treturn html.replace(regex, (match, videoUrl) => {\r\n\t\t// 替换为video标签，并添加controls属性以便用户可以控制播放\r\n\t\treturn `<video width=\"80%\" controls><source src=\"${videoUrl}\" type=\"video/mp4\"></video>`\r\n\t})\r\n}\r\n\r\n/**\r\n * 将img标签中内联style属性中的宽高样式提取出标签width与height属性\r\n * @param {Object} html 要处理的富文本字符串\r\n * @returns {Object} 返回处理结果\r\n */\r\nexport function convertImgStylesToAttributes(html) {\r\n\treturn html.replace(/<img\\s+([^>]+)\\s*>/g, function(match, attributes) {\r\n\t\t// 分割属性\r\n\t\tconst attrs = attributes.split(/\\s+/);\r\n\r\n\t\t// 找到style属性的位置\r\n\t\tconst styleIndex = attrs.findIndex(attr => attr.startsWith('style='));\r\n\t\tif (styleIndex === -1) return match; // 如果没有找到style属性，则返回原样\r\n\r\n\t\t// 提取style属性值\r\n\t\tconst styleAttr = attrs.splice(styleIndex, 1)[0];\r\n\t\tconst style = styleAttr.match(/\"([^\"]*)\"/)[1];\r\n\r\n\t\t// 解析 style 属性\r\n\t\tconst styleObj = {};\r\n\t\tstyle.split(';').forEach(function(part) {\r\n\t\t\tif (part) {\r\n\t\t\t\tconst [name, value] = part.split(':');\r\n\t\t\t\tstyleObj[name.trim()] = value.trim();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// 创建新的 img 标签\r\n\t\tlet newTag = '<img';\r\n\t\tif (styleObj.width) {\r\n\t\t\tnewTag += ` width=\"${styleObj.width}\"`;\r\n\t\t}\r\n\t\tif (styleObj.height) {\r\n\t\t\tnewTag += ` height=\"${styleObj.height}\"`;\r\n\t\t}\r\n\r\n\t\t// 添加原有的属性，包括修改过的style属性\r\n\t\tnewTag += ` ${styleAttr} ${attrs.join(' ')}`;\r\n\r\n\t\t// 关闭 img 标签\r\n\t\tnewTag += '>';\r\n\r\n\t\treturn newTag;\r\n\t});\r\n}"],"names":[],"mappings":";AACY,MAAC,WAAW;AAEjB,SAAS,QAAQ,WAAW,MAAM,UAAU;AAElD,YAAU,WAAW;AAAA,IACpB,MAAM;AAAA,EACR,CAAE;AAED,YAAU,YAAY;AAAA,IACrB,QAAQ,KAAK;AACZ,UAAI,UAAU,IAAI,MAAM;AACxB,YAAM,SAAS,QAAQ,UAAU,UAAQ;;AACxC,eAAO,KAAK,UAAU,OAAO,KAAK,WAAW,cAAY,UAAK,WAAL,mBAAa,QAAQ,eAAc;AAAA,MAChG,CAAI;AAED,UAAI,SAAS,IAAI;AAChB,cAAM,aAAa,QAAQ,MAAM;AACjC,cAAM,iBAAiB,WAAW;AAElC,cAAM,CAAC,QAAQ,MAAM,IAAI,WAAW,OAAO,MAAM,QAAQ;AACzD,cAAM,YAAY,CAAE;AAEpB,YAAI,QAAQ;AACX,gBAAM,YAAY,iBAAiB;AAAA,YAClC,QAAQ;AAAA,YACR,YAAY;AAAA,UAClB,IAAS;AAAA,YACH,QAAQ;AAAA,UACR;AACD,oBAAU,KAAK,SAAS;AAAA,QACxB;AAED,cAAM,UAAU;AAAA,UACf,QAAQ,KAAK;AAAA,UACb,YAAY;AAAA,YACX,MAAM,KAAK;AAAA,YACX,gBAAgB,KAAK,kBAAkB;AAAA;AAAA,YACvC,OAAO,KAAK,SAAS;AAAA,UACrB;AAAA,QACD;AACD,kBAAU,KAAK,OAAO;AAEtB,YAAI,QAAQ;AACX,gBAAM,YAAY,iBAAiB;AAAA,YAClC,QAAQ;AAAA,YACR,YAAY;AAAA,UAClB,IAAS;AAAA,YACH,QAAQ;AAAA,UACR;AACD,oBAAU,KAAK,SAAS;AAAA,QACxB;AAED,gBAAQ,OAAO,QAAQ,CAAC;AACxB,gBAAQ,OAAO,QAAQ,GAAG,GAAG,SAAS;AAEtC,kBAAU,YAAY;AAAA,UACrB,OAAO;AAAA,YACN,KAAK;AAAA,UACL;AAAA,QACN,CAAK;AAED,kBAAU,KAAM;AAGhB,YAAI;AAAU,mBAAU;AAAA,MACxB;AAAA,IACD;AAAA,EACH,CAAE;AAEF;;;"}